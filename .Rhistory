tmp <- data.frame(pca$rotation, name = movie_titles)
tmp %>%  ggplot(aes(PC1, PC2)) + geom_point() +
geom_text_repel(aes(PC1, PC2, label=name),
data = filter(tmp,
PC1 < -0.1 | PC1 >0.1 | PC2 < -0.15 | PC2>0.0))
rmse_results %>% kable
install.packages(shiny)
install.packages("shiny")
require(shiny)
install.packages("shiny")
install.packages("shiny")
require("shiny")
library("shiny")
library(shiny)
server <- function(input, output) {}
shinyApp(ui = ui, server = server)
library(shiny)
# Define UI for application that draws a histogram
ui <- shinyUI(fluidPage(
# Application title
titlePanel("Old Faithful Geyser Data"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
sliderInput("bins",
"Number of bins:",
min = 1,
max = 50,
value = 30)
),
# Show a plot of the generated distribution
mainPanel(
plotOutput("distPlot")
)
)
))
# Define server logic required to draw a histogram
server <- shinyServer(function(input, output) {
output$distPlot <- renderPlot({
# generate bins based on input$bins from ui.R
x    <- faithful[, 2]
bins <- seq(min(x), max(x), length.out = input$bins + 1)
# draw the histogram with the specified number of bins
hist(x, breaks = bins, col = 'darkgray', border = 'white')
})
})
# Run the application
shinyApp(ui = ui, server = server)
library(shiny)
ui <- fluidPage()
server <- functions(input, output) {}
shinyApp(ui, server)
library(shiny)
ui <- fluidPage()
server <- functions(input, output){}
shinyApp(ui, server)
library(shiny)
ui <- fluidPage()
server <- function(input, output){}
shinyApp(ui = ui, server = server)
library(shiny)
ui <- fluidPage(
sliderInput("num", "Choose a number", 1, 100, 50)
)
server <- function(input, output){}
shinyApp(ui, server)
library(shiny)
ui <- fluidPage(
sliderInput("num", "Choose a number", 1, 100, 50),
plotOutput("hist")
)
server <- function(input, output){}
shinyApp(ui, server)
library(shiny)
ui <- fluidPage(
sliderInput("num", "Choose a number", 1, 100, 50),
plotOutput("hist")
)
server <- function(input, output){
output$hist <-- renderPlot({
hist(iris$Sepal.Length)
})
}
shinyApp(ui, server)
runApp('Shiny_App_Class')
runApp('Shiny_App_Class')
library(shiny)
ui <- fluidPage(
sliderInput("num", "Choose a number", 1, 100, 50),
plotOutput("hist")
)
server <- function(input, output){
output$hist <- renderPlot({
hist(rnorm(input$num))
})
}
shinyApp(ui = ui, server = server)
library(shiny)
ui <- fluidPage(
sliderInput("num", "Choose a number", 1, 100, 50),
plotOutput("hist2")
)
server <- function(input, output){
output$hist2 <- renderPlot({
hist(rnorm(input$num))
})
}
shinyApp(ui = ui, server = server)
library(shiny)
ui <- fluidPage(
sliderInput("num", "Choose a number", 1, 100, 50),
plotOutput("hist2")
)
server <- function(input, output){
output$hist2 <- renderPlot({
hist(rnorm(input$num))
render(verbatimTextOutput(summary(rnorm(input$num))))
})
}
shinyApp(ui = ui, server = server)
library(shiny)
ui <- fluidPage(
sliderInput("num", "Choose a number", 1, 100, 50),
plotOutput("hist2")
)
server <- function(input, output){
output$hist2 <- renderPlot({
hist(rnorm(input$num))
verbatimTextOutput(summary(rnorm(input$num)))
})
}
shinyApp(ui = ui, server = server)
library(shiny)
ui <- fluidPage(
sliderInput("num", "Choose a number", 1, 100, 50),
plotOutput("hist2"),
verbatimTextOutput("sum")
)
server <- function(input, output){
output$hist2 <- renderPlot({
hist(rnorm(input$num))
})
output$sum <- renderPrint({verbatimTextOutput(summary(rnorm(input$num)))
})
}
shinyApp(ui = ui, server = server)
library(shiny)
ui <- fluidPage(
sliderInput("num", "Choose a number", 1, 100, 50),
plotOutput("hist2"),
verbatimTextOutput("sum")
)
server <- function(input, output){
output$hist2 <- renderPlot({
hist(rnorm(input$num))
})
output$sum <- renderPrint({(summary(rnorm(input$num)))
})
}
shinyApp(ui = ui, server = server)
library(shiny)
ui <- fluidPage(
sliderInput("num", "Choose a number", 1, 100, 50),
plotOutput("hist2"),
verbatimTextOutput("sum")
)
server <- function(input, output){
data <- reactive ({
rnorm(input$num)
})
output$hist2 <- renderPlot({
hist(data())
})
output$sum <- renderPrint({
(summary(data())
})
}
shinyApp(ui = ui, server = server)
library(shiny)
ui <- fluidPage(
sliderInput("num", "Choose a number", 1, 100, 50),
plotOutput("hist2"),
verbatimTextOutput("sum")
)
server <- function(input, output){
data <- reactive ({
rnorm(input$num)
})
output$hist2 <- renderPlot({
hist(data())
})
output$sum <- renderPrint({
summary(data())
})
}
shinyApp(ui = ui, server = server)
library(shiny)
ui <- fluidPage(
sliderInput("num", "Choose a number", 1, 100, 50),
plotOutput("hist2"),
verbatimTextOutput("sum")
)
server <- function(input, output){
data <- reactive ({
rnorm(input$num)
})
output$hist2 <- renderPlot({
hist(data())
})
output$sum <- renderPrint({
summary(data())
})
}
shinyApp(ui = ui, server = server)
install.packages("weatherData")
library("weatherData")
dat <- getWeatherForDate("PHNL", "2013-08-10", 2013-08-31")
dat <- getWeatherForDate("PHNL", "2013-08-10", 2013-08-31")
getWeatherForDate()
getWeatherForDate(station_id, start_date, end_date = NULL,
station_type = "airportCode", opt_detailed = FALSE,
opt_write_to_file = FALSE, opt_temperature_columns = TRUE,
opt_all_columns = FALSE, opt_custom_columns = FALSE,
custom_columns = NULL, opt_verbose = FALSE, daily_min = FALSE,
daily_max = FALSE)
dat <- getWeatherForDate("PHNL", "2013-08-10", "2013-08-31")
dat <- getWeatherForDate("PIT", "2013-08-10", "2013-08-31")
getHistoricalWeather <- function(airport.code="SFO", date="Sys.Date()")
{
base.url <- 'http://api.wunderground.com/api/{your key here}/'
# compose final url
final.url <- paste(base.url, 'history_', date, '/q/', airport.code, '.json', sep='')
# reading in as raw lines from the web service
conn <- url(final.url)
raw.data <- readLines(conn, n=-1L, ok=TRUE)
# Convert to a JSON
weather.data <- fromJSON(paste(raw.data, collapse=""))
close(conn)
return(weather.data)
}
# get data for 10 days - restriction by Weather Underground for free usage
date.range <- seq.Date(from=as.Date('2006-1-01'), to=as.Date('2006-1-10'), by='1 day')
# Initialize a data frame
hdwd <- data.frame()
# loop over dates, and fetch weather data
for(i in seq_along(date.range)) {
weather.data <- getHistoricalWeather('SFO', format(date.range[i], "%Y%m%d"))
hdwd <- rbind(hdwd, ldply(weather.data$history$dailysummary,
function(x) c('SJC', date.range[i], x$fog, x$rain, x$snow,  x$meantempi, x$meanvism, x$maxtempi, x$mintempi)))
}
colnames(hdwd) <- c("Airport", "Date", 'Fog', 'Rain', 'Snow','AvgTemp', 'AvgVisibility','MaxTemp','MinTemp')
# save to CSV
write.csv(hdwd, file=gzfile('SFC-Jan2006.csv.gz'), row.names=FALSE)
?fromJSON
??fromJSON
library(RJSONIO)
install.packages("RJSONIO")
library(RJSONIO)
install.packages("plyr")
install.packages("plyr")
library(plyr)
getHistoricalWeather <- function(airport.code="SFO", date="Sys.Date()")
{
base.url <- 'http://api.wunderground.com/api/{your key here}/'
# compose final url
final.url <- paste(base.url, 'history_', date, '/q/', airport.code, '.json', sep='')
# reading in as raw lines from the web service
conn <- url(final.url)
raw.data <- readLines(conn, n=-1L, ok=TRUE)
# Convert to a JSON
weather.data <- fromJSON(paste(raw.data, collapse=""))
close(conn)
return(weather.data)
}
# get data for 10 days - restriction by Weather Underground for free usage
date.range <- seq.Date(from=as.Date('2006-1-01'), to=as.Date('2006-1-10'), by='1 day')
# Initialize a data frame
hdwd <- data.frame()
# loop over dates, and fetch weather data
for(i in seq_along(date.range)) {
weather.data <- getHistoricalWeather('SFO', format(date.range[i], "%Y%m%d"))
hdwd <- rbind(hdwd, ldply(weather.data$history$dailysummary,
function(x) c('SJC', date.range[i], x$fog, x$rain, x$snow,  x$meantempi, x$meanvism, x$maxtempi, x$mintempi)))
}
colnames(hdwd) <- c("Airport", "Date", 'Fog', 'Rain', 'Snow','AvgTemp', 'AvgVisibility','MaxTemp','MinTemp')
# save to CSV
write.csv(hdwd, file=gzfile('SFC-Jan2006.csv.gz'), row.names=FALSE)
getHistoricalWeather <- function(airport.code="SFO", date="Sys.Date()")
{
base.url <- 'http://api.wunderground.com/api/{your key here}/'
# compose final url
final.url <- paste(base.url, 'history_', date, '/q/', airport.code, '.json', sep='')
# reading in as raw lines from the web service
conn <- url(final.url)
raw.data <- readLines(conn, n=-1L, ok=TRUE)
# Convert to a JSON
weather.data <- fromJSON(paste(raw.data, collapse=""))
close(conn)
return(weather.data)
}
# get data for 10 days - restriction by Weather Underground for free usage
date.range <- seq.Date(from=as.Date('2006-1-01'), to=as.Date('2006-1-10'), by='1 day')
# Initialize a data frame
hdwd <- data.frame()
# loop over dates, and fetch weather data
for(i in seq_along(date.range)) {
weather.data <- getHistoricalWeather('SFO', format(date.range[i], "%Y%m%d"))
hdwd <- rbind(hdwd, ldply(weather.data$history$dailysummary,
function(x) c('SJC', date.range[i], x$fog, x$rain, x$snow,  x$meantempi, x$meanvism, x$maxtempi, x$mintempi)))
}
colnames(hdwd) <- c("Airport", "Date", 'Fog', 'Rain', 'Snow','AvgTemp', 'AvgVisibility','MaxTemp','MinTemp')
# save to CSV
write.csv(hdwd, file=gzfile('SFC-Jan2006.csv.gz'), row.names=FALSE)
getHistoricalWeather <- function(airport.code="SFO", date="Sys.Date()")
{
base.url <- 'http://api.wunderground.com/api/HSPHDatScience/'
# compose final url
final.url <- paste(base.url, 'history_', date, '/q/', airport.code, '.json', sep='')
# reading in as raw lines from the web service
conn <- url(final.url)
raw.data <- readLines(conn, n=-1L, ok=TRUE)
# Convert to a JSON
weather.data <- fromJSON(paste(raw.data, collapse=""))
close(conn)
return(weather.data)
}
# get data for 10 days - restriction by Weather Underground for free usage
date.range <- seq.Date(from=as.Date('2006-1-01'), to=as.Date('2006-1-10'), by='1 day')
# Initialize a data frame
hdwd <- data.frame()
# loop over dates, and fetch weather data
for(i in seq_along(date.range)) {
weather.data <- getHistoricalWeather('SFO', format(date.range[i], "%Y%m%d"))
hdwd <- rbind(hdwd, ldply(weather.data$history$dailysummary,
function(x) c('SJC', date.range[i], x$fog, x$rain, x$snow,  x$meantempi, x$meanvism, x$maxtempi, x$mintempi)))
}
colnames(hdwd) <- c("Airport", "Date", 'Fog', 'Rain', 'Snow','AvgTemp', 'AvgVisibility','MaxTemp','MinTemp')
# save to CSV
write.csv(hdwd, file=gzfile('SFC-Jan2006.csv.gz'), row.names=FALSE)
getHistoricalWeather <- function(airport.code="SFO", date="Sys.Date()")
{
base.url <- 'http://api.wunderground.com/api/HSPHDatScience/'
# compose final url
final.url <- paste(base.url, 'history_', date, '/q/', airport.code, '.json', sep='')
# reading in as raw lines from the web service
conn <- url(final.url)
raw.data <- readLines(conn, n=-1L, ok=TRUE)
# Convert to a JSON
weather.data <- fromJSON(paste(raw.data, collapse=""))
close(conn)
return(weather.data)
}
# get data for 10 days - restriction by Weather Underground for free usage
date.range <- seq.Date(from=as.Date('2006-1-01'), to=as.Date('2006-1-10'), by='1 day')
# Initialize a data frame
hdwd <- data.frame()
# loop over dates, and fetch weather data
for(i in seq_along(date.range)) {
weather.data <- getHistoricalWeather('SFO', format(date.range[i], "%Y%m%d"))
hdwd <- rbind(hdwd, ldply(weather.data$history$dailysummary,
function(x) c('SJC', date.range[i], x$fog, x$rain, x$snow,  x$meantempi, x$meanvism, x$maxtempi, x$mintempi)))
}
colnames(hdwd) <- c("Airport", "Date", 'Fog', 'Rain', 'Snow','AvgTemp', 'AvgVisibility','MaxTemp','MinTemp')
# save to CSV
write.csv(hdwd, file=gzfile('SFC-Jan2006.csv.gz'), row.names=FALSE)
getHistoricalWeather <- function(airport.code="SFO", date="Sys.Date()")
{
base.url <- 'http://api.wunderground.com/api/HSPHDatScience/'
# compose final url
final.url <- paste(base.url, 'history_', date, '/q/', airport.code, '.json', sep='')
# reading in as raw lines from the web service
conn <- url(final.url)
raw.data <- readLines(conn, n=-1L, ok=TRUE)
# Convert to a JSON
weather.data <- fromJSON(paste(raw.data, collapse=""))
close(conn)
return(weather.data)
}
# get data for 10 days - restriction by Weather Underground for free usage
date.range <- seq.Date(from=as.Date('2006-1-01'), to=as.Date('2006-1-10'), by='1 day')
# Initialize a data frame
hdwd <- data.frame()
# loop over dates, and fetch weather data
for(i in seq_along(date.range)) {
weather.data <- getHistoricalWeather('SFO', format(date.range[i], "%Y%m%d"))
hdwd <- rbind(hdwd, ldply(weather.data$history$dailysummary,
function(x) c('SJC', date.range[i], x$fog, x$rain, x$snow,  x$meantempi, x$meanvism, x$maxtempi, x$mintempi)))
}
colnames(hdwd) <- c("Airport", "Date", 'Rain', 'Snow','AvgTemp','MaxTemp','MinTemp')
# save to CSV
write.csv(hdwd, file=gzfile('SFC-Jan2006.csv.gz'), row.names=FALSE)
rwunderground/man/forecast10day.Rd
checkDataAvailabilityForDateRange(station_id, start_date, end_date,
station_type = "airportCode")
data_okay <- checkDataAvailabilityForDateRange("BOS",
## End(Not run)
checkSummarizedDataAvailability
"2011-01-01",
"2011-03-31")
data_okay <- checkDataAvailabilityForDateRange("BOS","2011-01-01","2011-03-31")
install.packages("rwunderground")
library(rwunderground)
conditions(set_location(territory = "Hawaii", city = "Honolulu"))
conditions(set_location(territory = "Hawaii", city = "Honolulu"))
install.packages(httr)
install.packages("httr")
library(httr)
knitr::opts_chunk$set(cache = TRUE, warning = FALSE, message = FALSE)
options(httr_oauth_cache = TRUE)
library(ggplot2)
theme_set(theme_bw())
library(httr)
url <- "https://api.stackexchange.com/2.2/search"
req <- GET(url, query = list(order = "desc",
pagesize = 100,
sort = "creation",
tagged = "r",
site = "stackoverflow"))
req
status_code(req)
con <- content(req, "text")
library(jsonlite)
j <- jsonlite::fromJSON(con)
summary(j)
head(j$items)
library(dplyr)
r_questions <- j$items %>%
flatten() %>%
tbl_df()
r_questions
library(twitteR)
install.packages("twittR")
install.packages("twitteR")
library(twitteR)
options(twitter_consumer_key = "5vJDasKI4ZSUTq2I55kTY1zDT")
options(twitter_consumer_secret = "PGo7miqFwVLakEJ75ahZsrSUFX2akLX2npeMsFQWuiuSllJ675")
options(twitter_access_token = 'https://api.twitter.com/oauth/access_token')
options(twitter_access_token_secret = "https://api.twitter.com/oauth/authorize")
setup_twitter_oauth(getOption("twitter_consumer_key"),
getOption("twitter_consumer_secret"),
getOption("twitter_access_token"),
getOption("twitter_access_token_secret"))
credential <- OAuthFactory$new(consumerKey='5vJDasKI4ZSUTq2I55kTY1zDT',
consumerSecret='PGo7miqFwVLakEJ75ahZsrSUFX2akLX2npeMsFQWuiuSllJ675',
requestURL='https://api.twitter.com/oauth/request_token',
accessURL='https://api.twitter.com/oauth/access_token',
authURL='https://api.twitter.com/oauth/authorize')
library(ROAuth)
library(streamR)
credential <- OAuthFactory$new(consumerKey='5vJDasKI4ZSUTq2I55kTY1zDT',
consumerSecret='PGo7miqFwVLakEJ75ahZsrSUFX2akLX2npeMsFQWuiuSllJ675',
requestURL='https://api.twitter.com/oauth/request_token',
accessURL='https://api.twitter.com/oauth/access_token',
authURL='https://api.twitter.com/oauth/authorize')
options(twitter_consumer_key = "5vJDasKI4ZSUTq2I55kTY1zDT")
options(twitter_consumer_secret = "PGo7miqFwVLakEJ75ahZsrSUFX2akLX2npeMsFQWuiuSllJ675")
options(twitter_access_token = '1145484565-Uit9nc8ZGCOUqzF7t0iKTcJHHN45t9G8FwyGrlD')
options(twitter_access_token_secret = "3CjrJYFJswCbgMqxPxti9CJaXRL1x6Tdaqfe2CJvR9hLY")
setup_twitter_oauth(getOption("twitter_consumer_key"),
getOption("twitter_consumer_secret"),
getOption("twitter_access_token"),
getOption("twitter_access_token_secret"))
rstats <- searchTwitter("#rstats", n = 500)
# set working directory
# Nina
setwd("~/Documents/HSPH/DataScience/sales-predict-")
library(httr)
library(plyr)
library(dplyr)
library(knitr)
library(readr)
library(tidyr)
library(stringr)
library(ggplot2)
library(gridExtra)
library(ggrepel)
library(rwunderground)
# create date range
date.range <- seq.Date(from=as.Date('2015-6-20'),
to=as.Date('2016-4-20'), by='1 day')
date.range <- str_replace_all(date.range, "[[:punct:]]", "")
ny <- vector(mode='list', length=length(date.range))
for (i in seq_along(date.range)) {
print(date.range[i])
ny[[i]] <- history_daily(set_location(
territory = "New York", city = "New York"), date.range[i])
Sys.sleep(10)
}
# stack loop responses for weather data
weather_NewYork <- ldply(ny)
# save new york data as .csv
write.csv(weather_NewYork, file = "weather_NewYork_06-04_2015-16.csv", row.names=FALSE)
# create date range
date.range <- seq.Date(from=as.Date('2016-4-01'),
to=as.Date('2016-4-20'), by='1 day')
# remove "-" from date range
date.range <- str_replace_all(date.range, "[[:punct:]]", "")
# create empty vector to store dates
ny <- vector(mode='list', length=length(date.range))
# pull weather data from wunderground for all dates in date range
# pause for 10 seconds after each iteration (API only allows 10 requests per minute)
# city = New York
for (i in seq_along(date.range)) {
print(date.range[i])
ny[[i]] <- history_daily(set_location(
territory = "New York", city = "New York"), date.range[i])
Sys.sleep(10)
}
# stack loop responses for weather data
weather_NewYork <- ldply(ny)
# save new york data as .csv
write.csv(weather_NewYork, file = "weather_NewYork_04_2016.csv", row.names=FALSE)
